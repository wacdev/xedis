/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export function conn(server: Server, username: OptionString, password: OptionString, database?: number | undefined | null): Promise<Xedis>
export class Xedis {
  setex(key: Bin, val: Bin, ex: number): Promise<void>
  expire(key: Bin, ex: number): Promise<boolean>
  exist(key: Bin): Promise<number>
  hmget(map: Bin, li: Array<Bin>): Promise<Array<OptionString>>
  hmgetB(map: Bin, li: Array<Bin>): Promise<Array<Val>>
  hget(map: Bin, key: Bin): Promise<OptionString>
  hgetB(map: Bin, key: Bin): Promise<Val>
  hdel(map: Bin, key: Bin): Promise<number>
  hincr(map: Bin, key: Bin): Promise<number>
  hincrby(map: Bin, key: Bin, val: number): Promise<number>
  hexist(map: Bin, key: Bin): Promise<boolean>
  sadd(set: Bin, val: Bin): Promise<number>
  smembers(set: Bin): Promise<Array<Val>>
  zincrby(zset: Bin, key: Bin, score: number): Promise<number>
  zincr(zset: Bin, key: Bin): Promise<number>
  zscore(zset: Bin, key: Bin): Promise<number | null>
  getB(key: Bin): Promise<Val>
  get(key: Bin): Promise<OptionString>
  del(key: Bin): Promise<number>
  quit(): Promise<void>
  set(key: Bin, val: Bin): Promise<void>
  hset(map: Bin, key: BinOrMap, val?: Bin | undefined | null): Promise<void>
  zrangebyscoreWithscores(zset: Bin, opt?: Record<string, StrOrN> | undefined | null): Promise<Array<[Val, number]>>
  zrangebyscore(zset: Bin, opt?: Record<string, StrOrN> | undefined | null): Promise<Array<Val>>
  zrevrangebyscoreWithscores(zset: Bin, opt?: Record<string, StrOrN> | undefined | null): Promise<Array<[Val, number]>>
  zrevrangebyscore(zset: Bin, opt?: Record<string, StrOrN> | undefined | null): Promise<Array<Val>>
}
export class Server {
  static cluster(hostPortLi: Array<[string, number]>): Server
  static hostPort(host: string, port: number): Server
}
